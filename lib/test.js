// Generated by LiveScript 1.2.0
(function(){
  var ddb, db, Person, Name, johnDoe, firstName, lastName;
  ddb = require('./');
  db = new ddb.DB;
  Person = (function(superclass){
    var prototype = extend$((import$(Person, superclass).displayName = 'Person', Person), superclass).prototype, constructor = Person;
    function Person(){
      Person.superclass.apply(this, arguments);
    }
    return Person;
  }(ddb.ID));
  Name = (function(superclass){
    var prototype = extend$((import$(Name, superclass).displayName = 'Name', Name), superclass).prototype, constructor = Name;
    Name.type = [String, String];
    function Name(){
      Name.superclass.apply(this, arguments);
    }
    return Name;
  }(ddb.Data));
  [['John', 'Doe'], ['Jane', 'Doe']].forEach(function(arg$){
    var first, last, person, firstName, lastName;
    first = arg$[0], last = arg$[1];
    person = new Person;
    db.register(person);
    firstName = new Name('first', first);
    db.register(firstName);
    db.assoc(person, firstName);
    lastName = new Name('last', last);
    db.register(lastName);
    return db.assoc(person, lastName);
  });
  johnDoe = new Person;
  db.register(johnDoe);
  firstName = new Name('first', 'John');
  db.register(firstName);
  lastName = new Name('last', 'Doe');
  db.register(lastName);
  db.assoc(johnDoe, firstName);
  db.assoc(johnDoe, lastName);
  db.assoc(lastName, firstName);
  console.log(db.assocs(johnDoe));
  console.log(db.all(Name));
  console.log(db.assocs(new Name('last', 'Doe'), Person));
  function extend$(sub, sup){
    function fun(){} fun.prototype = (sub.superclass = sup).prototype;
    (sub.prototype = new fun).constructor = sub;
    if (typeof sup.extended == 'function') sup.extended(sub);
    return sub;
  }
  function import$(obj, src){
    var own = {}.hasOwnProperty;
    for (var key in src) if (own.call(src, key)) obj[key] = src[key];
    return obj;
  }
}).call(this);
