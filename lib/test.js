// Generated by LiveScript 1.2.0
(function(){
  var util, ddb, na, personKind, Person, q, nb, sa, sb;
  util = require('util');
  ddb = require('./');
  na = new ddb.Node;
  personKind = new ddb.ID;
  personKind.inspect = function(){
    return 'Person';
  };
  na.register(personKind);
  Person = (function(superclass){
    var prototype = extend$((import$(Person, superclass).displayName = 'Person', Person), superclass).prototype, constructor = Person;
    prototype.inspect = function(){
      return "<Person" + superclass.prototype.inspect.call(this) + ">";
    };
    prototype.registered = function(node){
      superclass.prototype.registered.call(this, node);
      return node.assoc(this, personKind);
    };
    Person.id = 'person';
    function Person(){
      Person.superclass.apply(this, arguments);
    }
    return Person;
  }(ddb.ID));
  ddb.registry.register(Person);
  [['John', 'Doe'], ['Jane', 'Doe'], ['Sally', 'Doe']].forEach(function(arg$){
    var first, last, person, firstName, lastName;
    first = arg$[0], last = arg$[1];
    person = new Person;
    na.register(person);
    firstName = new ddb.Data('first', first);
    na.register(firstName);
    na.assoc(person, firstName);
    lastName = new ddb.Data('last', last);
    na.register(lastName);
    return na.assoc(person, lastName);
  });
  q = new ddb.Query(na);
  q.add(new ddb.Data('last', 'Doe'));
  q.assoc();
  q.filterAssoc(personKind);
  q.assoc();
  q.filterOut(na);
  q.filter(new ddb.Data('first'));
  console.log(q.run());
  nb = new ddb.Node;
  sa = na.createStream();
  sb = nb.createStream();
  sa.pipe(sb).pipe(sa);
  console.log(nb.assocs());
  q = new ddb.Query(nb);
  q.add(new ddb.Data('last', 'Doe'));
  q.assoc();
  q.filterAssoc(personKind);
  q.assoc();
  q.filterOut(na, nb);
  q.filter(new ddb.Data('first'));
  console.log(q.run());
  function extend$(sub, sup){
    function fun(){} fun.prototype = (sub.superclass = sup).prototype;
    (sub.prototype = new fun).constructor = sub;
    if (typeof sup.extended == 'function') sup.extended(sub);
    return sub;
  }
  function import$(obj, src){
    var own = {}.hasOwnProperty;
    for (var key in src) if (own.call(src, key)) obj[key] = src[key];
    return obj;
  }
}).call(this);
