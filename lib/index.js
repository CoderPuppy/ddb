// Generated by LiveScript 1.2.0
(function(){
  var crypto, Buffer, ddb, Node, Cell, JSONCell, convertForView, convertForStorage;
  crypto = require('crypto');
  Buffer = require('buffer').Buffer;
  ddb = exports;
  ddb.Node = Node = (function(){
    Node.displayName = 'Node';
    var prototype = Node.prototype, constructor = Node;
    function Node(){
      this.cells = {};
    }
    prototype.register = function(cell){
      var i$, ref$, len$, link, results$ = [];
      this.cells[cell.id] = cell;
      for (i$ = 0, len$ = (ref$ = cell.links).length; i$ < len$; ++i$) {
        link = ref$[i$];
        results$.push(this.register(link.cell));
      }
      return results$;
    };
    return Node;
  }());
  ddb.Cell = Cell = (function(){
    Cell.displayName = 'Cell';
    var prototype = Cell.prototype, constructor = Cell;
    function Cell(){
      this.links == null && (this.links = []);
      this.id = crypto.createHash('sha256').update(this.buffer).digest('hex');
      this.str = this.buffer.toString();
    }
    return Cell;
  }());
  ddb.JSONCell = JSONCell = (function(superclass){
    var prototype = extend$((import$(JSONCell, superclass).displayName = 'JSONCell', JSONCell), superclass).prototype, constructor = JSONCell;
    function JSONCell(json){
      var storedJSON, k, v;
      this.links = [];
      if (typeof json === 'object') {
        this.data = {};
        storedJSON = {};
        for (k in json) {
          v = json[k];
          if (v instanceof ddb.Cell) {
            this.links.push({
              id: v.id,
              cell: v,
              name: k
            });
            storedJSON[k] = v.id;
            if (v instanceof ddb.JSONCell) {
              this.data[k] = v.data;
            } else {
              this.data[k] = v;
            }
          } else {
            storedJSON[k] = v;
          }
        }
      } else {
        this.data = json;
        storedJSON = json;
      }
      this.buffer = new Buffer(JSON.stringify(storedJSON));
      JSONCell.superclass.call(this);
    }
    return JSONCell;
  }(ddb.Cell));
  ddb.cell = function(node, json){
    var cell;
    if (json == null) {
      json = node;
      node = undefined;
    }
    cell = new JSONCell(json);
    if (node != null) {
      node.register(cell);
    }
    return cell;
  };
  convertForView = function(json){
    var res, k, v;
    if (typeof json === 'object') {
      res = {};
      for (k in json) {
        v = json[k];
        if (v instanceof ddb.JSONCell) {
          res[k] = v.json;
        } else {
          res[k] = v;
        }
      }
      return res;
    } else {
      return json;
    }
  };
  convertForStorage = function(json){
    var storedJSON, k, v;
    if (typeof json === 'object') {
      storedJSON = {};
      for (k in json) {
        v = json[k];
        if (v instanceof ddb.Cell) {
          storedJSON[k] = v.id;
        } else {
          storedJSON[k] = v;
        }
      }
      return storedJSON;
    } else {
      return json;
    }
  };
  function extend$(sub, sup){
    function fun(){} fun.prototype = (sub.superclass = sup).prototype;
    (sub.prototype = new fun).constructor = sub;
    if (typeof sup.extended == 'function') sup.extended(sub);
    return sub;
  }
  function import$(obj, src){
    var own = {}.hasOwnProperty;
    for (var key in src) if (own.call(src, key)) obj[key] = src[key];
    return obj;
  }
}).call(this);
