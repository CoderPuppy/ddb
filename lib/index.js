// Generated by LiveScript 1.2.0
(function(){
  var util, hat, ddb, DB, Object, ID, Data, slice$ = [].slice;
  util = require('util');
  hat = require('hat');
  ddb = exports;
  ddb.DB = DB = (function(){
    DB.displayName = 'DB';
    var prototype = DB.prototype, constructor = DB;
    function DB(){
      this.objects = new Map;
      this._assocs = new Map;
      this.rack = hat.rack();
    }
    prototype.register = function(obj){
      var objs;
      objs = this.objects.get(obj.constructor);
      if (objs == null) {
        objs = {};
        this.objects.set(obj.constructor, objs);
      }
      if (objs[obj.id()] == null) {
        obj.registered(this);
        objs[obj.id()] = obj;
        this.rack.set(obj.id(), obj);
      }
      return this;
    };
    prototype.all = function(kind){
      var objs, all, id, obj;
      objs = this.objects.get(kind);
      if (objs != null) {
        all = [];
        for (id in objs) {
          obj = objs[id];
          all.push(obj);
        }
        return all;
      } else {
        return [];
      }
    };
    prototype.assocs = function(obj, kind){
      var allAssocs, assocs;
      kind == null && (kind = ddb.Object);
      allAssocs = this._assocs.get(obj.constructor);
      if (allAssocs != null) {
        assocs = allAssocs[obj.id()];
        if (assocs != null) {
          return assocs.filter(function(it){
            return it instanceof kind;
          });
        } else {
          return new Set;
        }
      } else {
        return new Set;
      }
    };
    prototype.assoc = function(a, b){
      var this$ = this;
      (function(){
        var allAssocs, assocs;
        allAssocs = this$._assocs.get(a.constructor);
        if (allAssocs == null) {
          allAssocs = {};
          this$._assocs.set(a.constructor, allAssocs);
        }
        assocs = allAssocs[a.id()];
        if (assocs == null) {
          assocs = [];
          allAssocs[a.id()] = assocs;
        }
        if (!~assocs.indexOf(b)) {
          return assocs.push(b);
        }
      })();
      (function(){
        var allAssocs, assocs;
        allAssocs = this$._assocs.get(b.constructor);
        if (allAssocs == null) {
          allAssocs = {};
          this$._assocs.set(b.constructor, allAssocs);
        }
        assocs = allAssocs[b.id()];
        if (assocs == null) {
          assocs = [];
          allAssocs[b.id()] = assocs;
        }
        if (!~assocs.indexOf(a)) {
          return assocs.push(a);
        }
      })();
      return this;
    };
    return DB;
  }());
  ddb.Object = Object = (function(){
    Object.displayName = 'Object';
    var prototype = Object.prototype, constructor = Object;
    prototype.registered = function(db){};
    function Object(){}
    return Object;
  }());
  ddb.ID = ID = (function(superclass){
    var prototype = extend$((import$(ID, superclass).displayName = 'ID', ID), superclass).prototype, constructor = ID;
    prototype.id = function(){
      return this._id;
    };
    prototype.inspect = function(){
      return "<" + this.constructor.name + ":" + this._id + ">";
    };
    prototype.registered = function(db){
      return this._id = db.rack(this);
    };
    function ID(){
      ID.superclass.apply(this, arguments);
    }
    return ID;
  }(ddb.Object));
  ddb.Data = Data = (function(superclass){
    var prototype = extend$((import$(Data, superclass).displayName = 'Data', Data), superclass).prototype, constructor = Data;
    function Data(){
      this.data = slice$.call(arguments);
    }
    prototype.inspect = function(){
      return [
        this.constructor.name, '(', this.data.map(function(it){
          return util.inspect(it);
        }).join(', '), ')'
      ].join('');
    };
    prototype.id = function(){
      return this.data.map(JSON.stringify).join('-');
    };
    return Data;
  }(ddb.Object));
  function extend$(sub, sup){
    function fun(){} fun.prototype = (sub.superclass = sup).prototype;
    (sub.prototype = new fun).constructor = sub;
    if (typeof sup.extended == 'function') sup.extended(sub);
    return sub;
  }
  function import$(obj, src){
    var own = {}.hasOwnProperty;
    for (var key in src) if (own.call(src, key)) obj[key] = src[key];
    return obj;
  }
}).call(this);
