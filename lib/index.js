// Generated by LiveScript 1.2.0
(function(){
  var util, hat, ddb, Node, ID, Data, DB, Query, slice$ = [].slice;
  util = require('util');
  hat = require('hat');
  ddb = exports;
  ddb.registry = {};
  (function(){
    this.kinds = {};
    this.from = function(arg$){
      var id, j;
      id = arg$[0], j = arg$[1];
      return this.kinds[id].fromJson(j);
    };
    this.register = function(kind){
      if (this.kinds[kind.id] != null) {
        throw new Error("A kind with that id: " + util.inspect(kind.id) + " is already registered");
      }
      return this.kinds[kind.id] = kind;
    };
  }.call(ddb.registry));
  ddb.Node = Node = (function(){
    Node.displayName = 'Node';
    var prototype = Node.prototype, constructor = Node;
    prototype.registered = function(db){};
    prototype.id = function(){
      throw new Error(this.constructor.name + " must implement id");
    };
    prototype.toJson = function(){
      throw new Error(this.constructor.name + " must implement to-json");
    };
    prototype.qid = function(){
      return this.constructor.id + "-" + this.id();
    };
    prototype.filter = function(filter){
      if (filter instanceof Function && filter.prototype instanceof ddb.Node) {
        if (!(this instanceof filter)) {
          return false;
        }
      }
      return true;
    };
    function Node(){}
    return Node;
  }());
  ddb.ID = ID = (function(superclass){
    var prototype = extend$((import$(ID, superclass).displayName = 'ID', ID), superclass).prototype, constructor = ID;
    prototype.id = function(){
      return this._id;
    };
    prototype.inspect = function(){
      return "<" + this.constructor.name + ":" + this._id + ">";
    };
    prototype.registered = function(db){
      if (this._id != null) {
        throw new Error('You\'re using an ID with multiple databases, that won\'t work');
      }
      return this._id = db.rack(this);
    };
    prototype.toJson = function(){
      return {};
    };
    ID.fromJson = function(j){
      return new this;
    };
    function ID(){
      ID.superclass.apply(this, arguments);
    }
    return ID;
  }(ddb.Node));
  ddb.Data = Data = (function(superclass){
    var prototype = extend$((import$(Data, superclass).displayName = 'Data', Data), superclass).prototype, constructor = Data;
    function Data(){
      var i$, len$;
      this.data = slice$.call(arguments);
      if (this.constructor.names != null) {
        for (i$ = 0, len$ = this.constructor.names.length; i$ < len$; ++i$) {
          (fn$.call(this, i$, this.constructor.names[i$]));
        }
      }
      function fn$(i, name){
        this[name] = function(newVal){
          if (newVal != null) {
            this.data[i] = newVal;
            return this;
          } else {
            return this.data[i];
          }
        };
      }
    }
    prototype.inspect = function(){
      return [
        this.constructor.name, '(', this.data.map(function(it){
          return util.inspect(it);
        }).join(', '), ')'
      ].join('');
    };
    prototype.id = function(){
      return this.data.map(JSON.stringify).join('-');
    };
    prototype.toJson = function(){
      return this.data;
    };
    Data.fromJson = function(j){
      return (function(func, args, ctor) {
        ctor.prototype = func.prototype;
        var child = new ctor, result = func.apply(child, args), t;
        return (t = typeof result)  == "object" || t == "function" ? result || child : child;
  })(this, j, function(){});
    };
    prototype.filter = function(filter){
      var i$, ref$, len$, i, d;
      if (filter instanceof this.constructor) {
        for (i$ = 0, len$ = (ref$ = filter.data).length; i$ < len$; ++i$) {
          i = i$;
          d = ref$[i$];
          if (!(d != null && this.data[i] === d)) {
            return false;
          }
        }
        return true;
      }
      return superclass.prototype.filter.call(this, filter);
    };
    return Data;
  }(ddb.Node));
  ddb.DB = DB = (function(superclass){
    var prototype = extend$((import$(DB, superclass).displayName = 'DB', DB), superclass).prototype, constructor = DB;
    function DB(){
      this.nodes = {};
      this._assocs = {};
      this.rack = hat.rack();
      this.register(this);
    }
    prototype.toJson = function(){
      var j, indexes, id, ref$, node, savedAssocs, aId, assocs, i$, len$, bId, ref1$;
      j = {
        nodes: [],
        assocs: []
      };
      indexes = {};
      for (id in ref$ = this.nodes) {
        node = ref$[id];
        if (node !== this) {
          j.nodes.push([node.constructor.id, node.toJson()]);
          indexes[node.qid()] = j.nodes.length - 1;
        }
      }
      savedAssocs = {};
      for (aId in ref$ = this._assocs) {
        assocs = ref$[aId];
        savedAssocs[aId] = new Set;
        for (i$ = 0, len$ = assocs.length; i$ < len$; ++i$) {
          bId = assocs[i$];
          if (!(((ref1$ = savedAssocs[bId]) != null && ref1$.has(aId)) || bId === this.qid() || aId === this.qid())) {
            j.assocs.push([indexes[aId], indexes[bId]]);
          }
          savedAssocs[aId].add(bId);
        }
      }
      return j;
    };
    prototype.loadJson = function(j){
      var nodes, i$, ref$, len$, i, node, assoc;
      nodes = {};
      for (i$ = 0, len$ = (ref$ = j.nodes).length; i$ < len$; ++i$) {
        i = i$;
        node = ref$[i$];
        node = ddb.registry.from(node);
        nodes[i] = node;
        this.register(node);
      }
      for (i$ = 0, len$ = (ref$ = j.assocs).length; i$ < len$; ++i$) {
        assoc = ref$[i$];
        this.assoc(nodes[assoc[0]], nodes[assoc[1]]);
      }
      return this;
    };
    DB.fromJson = function(j){
      return new this().loadJson(j);
    };
    prototype.register = function(node){
      if (this.nodes[node.qid()] == null) {
        node.registered(this);
        this.nodes[node.qid()] = node;
        this.assoc(this, node);
        this.assoc(node, node);
        this.rack.set(node.qid(), node);
      }
      return this;
    };
    prototype.all = function(filter){
      return this.assocs(this, filter);
    };
    prototype.assocs = function(node, filter){
      var assocs, this$ = this;
      node == null && (node = this);
      assocs = this._assocs[node.qid()];
      if (assocs != null) {
        return assocs.map(function(it){
          return this$.nodes[it];
        }).filter(function(it){
          return it.filter(filter);
        });
      } else {
        return [];
      }
    };
    prototype.assoc = function(a, b){
      var this$ = this;
      (function(){
        var assocs;
        assocs = this$._assocs[a.qid()];
        if (assocs == null) {
          assocs = [];
          this$._assocs[a.qid()] = assocs;
        }
        if (!~assocs.indexOf(b.qid())) {
          return assocs.push(b.qid());
        }
      })();
      (function(){
        var assocs;
        assocs = this$._assocs[b.qid()];
        if (assocs == null) {
          assocs = [];
          this$._assocs[b.qid()] = assocs;
        }
        if (!~assocs.indexOf(a.qid())) {
          return assocs.push(a.qid());
        }
      })();
      return this;
    };
    return DB;
  }(ddb.ID));
  ddb.Query = Query = (function(){
    Query.displayName = 'Query';
    var Assoc, Nodes, Filter, prototype = Query.prototype, constructor = Query;
    function Query(db){
      this.db = db;
      this.base = slice$.call(arguments, 1);
      if (!this.base.length) {
        this.base.push(this.db);
      }
      this.parts = [];
    }
    prototype.assoc = function(filter){
      return this.parts.push(new constructor.Assoc(filter));
    };
    prototype.add = function(){
      var nodes;
      nodes = slice$.call(arguments);
      return this.parts.push((function(func, args, ctor) {
        ctor.prototype = func.prototype;
        var child = new ctor, result = func.apply(child, args), t;
        return (t = typeof result)  == "object" || t == "function" ? result || child : child;
  })(constructor.Nodes, nodes, function(){}));
    };
    prototype.filter = function(filter){
      return this.parts.push(new constructor.Filter(filter));
    };
    prototype.run = function(){
      var this$ = this;
      return this.parts.reduce(function(acc, val){
        return val.find(this$.db, acc);
      }, this.base);
    };
    Query.Assoc = Assoc = (function(){
      Assoc.displayName = 'Assoc';
      var prototype = Assoc.prototype, constructor = Assoc;
      function Assoc(filter){
        this.filter = filter;
      }
      prototype.find = function(db, prev){
        var this$ = this;
        return prev.reduce(function(acc, node){
          var assocs, i$, len$;
          acc = acc.slice();
          assocs = db.assocs(node, this$.filter);
          for (i$ = 0, len$ = assocs.length; i$ < len$; ++i$) {
            node = assocs[i$];
            if (acc.indexOf(node) === -1) {
              acc.push(node);
            }
          }
          return acc;
        }, []);
      };
      return Assoc;
    }());
    Query.Nodes = Nodes = (function(){
      Nodes.displayName = 'Nodes';
      var prototype = Nodes.prototype, constructor = Nodes;
      function Nodes(){
        this.nodes = slice$.call(arguments);
      }
      prototype.find = function(db, prev){
        var after, i$, ref$, len$, node;
        after = prev.slice();
        for (i$ = 0, len$ = (ref$ = this.nodes).length; i$ < len$; ++i$) {
          node = ref$[i$];
          if (after.indexOf(node) === -1) {
            after.push(node);
          }
        }
        return after;
      };
      return Nodes;
    }());
    Query.Filter = Filter = (function(){
      Filter.displayName = 'Filter';
      var prototype = Filter.prototype, constructor = Filter;
      function Filter(filter){
        this.filter = filter;
      }
      prototype.find = function(db, prev){
        var this$ = this;
        return prev.filter(function(it){
          return it.filter(this$.filter);
        });
      };
      return Filter;
    }());
    return Query;
  }());
  function extend$(sub, sup){
    function fun(){} fun.prototype = (sub.superclass = sup).prototype;
    (sub.prototype = new fun).constructor = sub;
    if (typeof sup.extended == 'function') sup.extended(sub);
    return sub;
  }
  function import$(obj, src){
    var own = {}.hasOwnProperty;
    for (var key in src) if (own.call(src, key)) obj[key] = src[key];
    return obj;
  }
}).call(this);
